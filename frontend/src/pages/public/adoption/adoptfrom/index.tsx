import React, { useState, useEffect } from 'react'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° useEffect ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
import { useParams, useNavigate } from 'react-router-dom';
import { useDog } from "../../../../hooks/useDog";
import type { CreateAdoptionRequest } from '../../../../interfaces/Adoption';
import './style.css';
import { useAuthUser } from "../../../../hooks/useAuth"; // <-- 1. Import hook useAuthUser

const AdoptionForm: React.FC = () => {
    const { dogId } = useParams<{ dogId: string }>();
    const navigate = useNavigate();
    
    // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ---
    const { user, isLoggedIn } = useAuthUser(); // <-- 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ hook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
    // ----------------------

    const { dog, loading: loadingDog, error: dogFetchError } = useDog(dogId ? Number(dogId) : null);

    const [formData, setFormData] = useState<CreateAdoptionRequest>({
        first_name: '', last_name: '', phone_number: '',
        address: '', district: '', city: '', province: '',
        zip_code: '', job: '', income: 0,
        dog_id: parseInt(dogId || '0'),
    });
    const [loadingSubmit, setLoadingSubmit] = useState(false);
    const [formError, setFormError] = useState('');

    // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥) ---
    // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    useEffect(() => {
        if (user) {
            setFormData(prev => ({
                ...prev,
                first_name: user.first_name || '',
                last_name: user.last_name || '',
                phone_number: user.phone || '',
            }));
        }
    }, [user]); // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    // ---------------------------------

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: name === 'income' ? parseFloat(value) || 0 : value,
        }));
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setFormError('');

        // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
        // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user login ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if (!user || !isLoggedIn) {
            setFormError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á');
            // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ navigate ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
            // navigate('/login');
            return;
        }

        setLoadingSubmit(true);

        // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° user_id ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        const submissionData = {
            ...formData,
            user_id: user.ID, 
        };
        // -------------------

        try {
            const response = await fetch('http://localhost:8000/adoptions', {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    // ‡∏´‡∏≤‡∏Å API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ token ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà Authorization header ‡∏î‡πâ‡∏ß‡∏¢
                    // 'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify(submissionData), // <-- 5. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ user_id
            });

            const result = await response.json();
            if (!response.ok) {
                throw new Error(result.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            }
            alert('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
            navigate('/');
        } catch (err: unknown) {
            if (err instanceof Error) {
                setFormError(err.message);
            } else {
                setFormError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å');
            }
        } finally {
            setLoadingSubmit(false);
        }
    };

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î" ‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏ô‡∏±‡∏Ç
    if (loadingDog) {
        return <div className="loading-container">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏ô‡∏±‡∏Ç...</div>;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏´‡∏≤‡∏Å‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (dogFetchError) {
        return <div className="error-message">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {dogFetchError}</div>;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏Å
    return (
        <div className="adoption-container">
            <div className="adoption-header">
                <br />
                <br />  
                <br />
                <br />
                <h1>‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏à‡∏∞‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</h1>
            </div>
            <div className="adoption-content">
                <div className="dog-section">
                    {dog ? (
                        <>
                            <div
                                className="dog-photo"
                                style={{ backgroundImage: `url(${dog.photo_url || 'https://via.placeholder.com/200/cccccc/ffffff?text=üêï'})` }}
                            />
                            <h2 className="dog-name">{dog.name}</h2>
                        </>
                    ) : (
                        <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
                    )}
                </div>
                <div className="form-section">
                    <h2 className="form-title">‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô</h2>
                    <form onSubmit={handleSubmit} autoComplete="off"></form>
                    {formError && <div className="error-message">{formError}</div>}
                    <form onSubmit={handleSubmit}>
                        <div className="form-row">
                            <div className="form-group">
                                <label>‡∏ä‡∏∑‡πà‡∏≠*</label>
                                <input type="text" name="first_name" value={formData.first_name} onChange={handleInputChange} required />
                            </div>
                            <div className="form-group">
                                <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•*</label>
                                <input type="text" name="last_name" value={formData.last_name} onChange={handleInputChange} required />
                            </div>
                        </div>
                        <div className="form-group">
                            <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠*</label>
                            <input type="tel" name="phone_number" value={formData.phone_number} onChange={handleInputChange} required />
                        </div>
                        <div className="form-row">
                            <div className="form-group">
                                <label>‡∏≠‡∏≤‡∏ä‡∏µ‡∏û*</label>
                                <input type="text" name="job" value={formData.job} onChange={handleInputChange} required />
                            </div>
                            <div className="form-group">
                                <label>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ (‡∏ö‡∏≤‡∏ó)</label>
                                <input type="number" name="income" value={formData.income || ''} onChange={handleInputChange} min="0" />
                            </div>
                        </div>
                        <div className="form-group">
                            <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà*</label>
                            <input type="text" name="address" value={formData.address} onChange={handleInputChange} required />
                        </div>
                        <div className="form-row three-columns">
                            <div className="form-group">
                                <label>‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á*</label>
                                <input type="text" name="district" value={formData.district} onChange={handleInputChange} required />
                            </div>
                            <div className="form-group">
                                <label>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï*</label>
                                <input type="text" name="city" value={formData.city} onChange={handleInputChange} required />
                            </div>
                            <div className="form-group">
                                <label>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î*</label>
                                <input type="text" name="province" value={formData.province} onChange={handleInputChange} required />
                            </div>
                        </div>
                        <div className="form-group">
                            <label>‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå*</label>
                            <input type="text" name="zip_code" value={formData.zip_code} onChange={handleInputChange} maxLength={5} required />
                        </div>
                        <button type="submit" className="submit-button" disabled={loadingSubmit || !dog}>
                            {loadingSubmit ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á'}
                        </button>
                    </form>
                </div>
            </div>
        </div>
    );
};

export default AdoptionForm;