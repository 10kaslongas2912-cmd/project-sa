import React, { useState, useEffect } from 'react';
import { api } from '../../../../services/apis'; // <-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path
import type { MyCurrentAdoption } from '../../../../interfaces/Adoption';
import { useAuthUser } from "../../../../hooks/useAuth";
import './style.css';

const MyCurrentAdoptionsPage: React.FC = () => {
    const { isLoggedIn, loading: authLoading } = useAuthUser();
    const [myAdoptions, setMyAdoptions] = useState<MyCurrentAdoption[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (authLoading) return;
        if (!isLoggedIn) {
            setLoading(false);
            return;
        }

        const fetchMyCurrentAdoptions = async () => {
            try {
                setLoading(true);
                const res = await api.adopterAPI.getMyCurrentAdoptions();
                setMyAdoptions(res.data || []);
            } catch (err: unknown) {
                setError(err instanceof Error ? err.message : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
            } finally {
                setLoading(false);
            }
        };

        fetchMyCurrentAdoptions();
    }, [isLoggedIn, authLoading]);

    if (authLoading || loading) {
        return <div className="my-adoptions-message">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>;
    }

    if (!isLoggedIn) {
        return <div className="my-adoptions-message">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</div>;
    }

    if (error) {
        return <div className="my-adoptions-message error">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}</div>;
    }

    return (
        <div className="my-adoptions-container">
            <h1>‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h1>
            {myAdoptions.length > 0 ? (
                <div className="adopted-dogs-grid">
                    {myAdoptions.map((adoption) => (
                        adoption.dog && (
                            <div key={adoption.ID} className="dog-card-adopted">
                                <img
                                    src={adoption.dog.photo_url || 'https://placehold.co/400x400/cccccc/ffffff?text=üêï'}
                                    alt={`‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á ${adoption.dog.name}`}
                                    className="dog-image-adopted"
                                />
                                <div className="dog-info-adopted">
                                    <h2 className="dog-name-adopted">{adoption.dog.name}</h2>
                                    <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {new Date(adoption.CreatedAt).toLocaleDateString('th-TH')}</p>
                                </div>
                            </div>
                        )
                    ))}
                </div>
            ) : (
                <div className="my-adoptions-message">‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏π‡πÅ‡∏•</div>
            )}
        </div>
    );
};

export default MyCurrentAdoptionsPage;